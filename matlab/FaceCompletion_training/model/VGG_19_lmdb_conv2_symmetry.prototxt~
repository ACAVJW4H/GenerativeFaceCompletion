name: "VGG_ILSVRC_19_layers"
input: "data"
input_dim: 8
input_dim: 3
input_dim: 224
input_dim: 224

layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param { 
    lr_mult: 0
    decay_mult: 1
  }
  param { 
    lr_mult: 0 
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param { 
    lr_mult: 0
    decay_mult: 1
  }
  param { 
    lr_mult: 0 
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  top: "pool1_mask"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param { 
    lr_mult: 0
    decay_mult: 1
  }
  param { 
    lr_mult: 0 
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param { 
    lr_mult: 0
    decay_mult: 1
  }
  param { 
    lr_mult: 0 
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  top: "pool2_mask"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

##
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "pool2"
  bottom: "pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode2_2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2_2"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
      #type: "msra"
      #variance_norm: AVERAGE
    }
    bias_filler {
      type: "constant"
      value: 0
}
}
}
layer {
  bottom: "conv_decode2_2"
  top: "conv_decode2_2"
  name: "de_relu2_2"
  type: "ReLU"
}
layer {
  name: "conv_decode2_1"
  type: "Convolution"
  bottom: "conv_decode2_2"
  top: "conv_decode2_1"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
      #type: "msra"
      #variance_norm: AVERAGE
    }
    bias_filler {
      type: "constant"
      value: 0
}
}
}
layer {
  bottom: "conv_decode2_1"
  top: "conv_decode2_1"
  name: "de_relu2_1"
  type: "ReLU"
}

##
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2_1"
  bottom: "pool1_mask"
  top: "upsample1"
  upsample_param {
    scale: 2
  }
}

layer {
  name: "conv_decode1_2"
  type: "Convolution"
  bottom: "upsample1"
  top: "conv_decode1_2"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
      #type: "msra"
      #variance_norm: AVERAGE
    }
    bias_filler {
      type: "constant"
      value: 0
}
}
}

layer {
  bottom: "conv_decode1_2"
  top: "conv_decode1_2"
  name: "de_relu1_2"
  type: "ReLU"
}

layer {
  name: "conv_decode1_1"
  type: "Convolution"
  bottom: "conv_decode1_2"
  top: "conv_decode1_1"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
      #type: "msra"
      #variance_norm: AVERAGE
    }
    bias_filler {
      type: "constant"
      value: 0
}
}
}

layer {
  bottom: "conv_decode1_1"
  top: "conv_decode1_1"
  name: "de_relu1_1"
  type: "ReLU"
}

layer {
  name: "reconstruction"
  type: "Convolution"
  bottom: "conv_decode1_1"
  top: "reconstruction"
  loss_weight: 1.0
  convolution_param {
    num_output: 3
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
      #type: "msra"
      #variance_norm: AVERAGE
    }
    bias_filler {
      type: "constant"
      value: 0
}
}
}


